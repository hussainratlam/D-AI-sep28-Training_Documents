SkillfyMe - DevOps with AI Training Programme 

#########################
Day - 1 | 28th Sep. 2024
#########################

Fundamentals of Linux :::

	Linux on DevOps Perspectives :::

	1. Overview of Linux Operating System 
	2. Core Concepts of Linux OS 
	
	Roles and Responsibilities of DevOps Team on Linux ::
	
		1. What is Linux Operating System?
		2. Handling the Files on Linux Machines 
		3. Package Management 
			--> Install / Uninstall / Upgrade the Linux Packages 
		4. User Management 
		5. Access Management
		6. Networking - Access the Remote Servers 
		7. Process Automation
			- Shell Scripting
			
	Operating Systems :
	
		Windows OS 
		
		Linux OS ::
		
			- Linux is Open-Source 
			- Linux OS is highly secured
			- Linux based on Command Line User Interface
			- Linux Operating System - Is Considered as a core for any computing environment which need a reliable environment.
			- Kernel --> Core of Linux OS 
			- Core of Linux OS is called kernel!
			Components of Linux OS Architecture
				- Networking 
				- Storage 
				- IPC - Inter Process Communication
				- User Management 
				- Security Management 
				- Control Groups 
				- Namespace 
				- Process 	
	
	How to Work with Linux Operating System :::
	
		Linux 
		
		1. Create a free-tier on AWS Cloud Platform 
				https://aws.amazon.com/console/
				
				- Active Email_ID 
				- Active Mobile Number 
				- Active Credit/Debit Card Number with International Transaction enabled.
				
		2. Create Linux based Virtual Machines
		
		3. Connect to AWS EC2 Instance (VM)
		
			- EC2 Instance Connect thru web browser
			
			- SSH Agent :		# For Windows Users 
				- MobaXterm 		# https://mobaxterm.mobatek.net/download.html
									# https://mobaxterm.mobatek.net/download-home-edition.html
										- Choose MobaXterm Home Edition 
										- Download zipfile
											- Extract and run the exec file.
											
				SSH Connection using Key based Authention :

					- HostName 
					- UserName 
					- User_Credential(Private_Key)
						
				- Putty 
				
			- Terminal 			# Mac / Linux Users 
			
		4. Start working on Linux 
			
			
	Login to AWS Console 
	
	Choose Nearest AWS Region 
	
	Select EC2 Service - goto EC2 Dashboard 
	
	AMI ::
	
		Types/Distributions of Linux ::
		
			- RHEL / Centos 
			
			- Debian/Ubuntu 				# Will be using this as Default Linux
			
			- Fedora 
			
			- Amazon Linux 
			
		
	Choose AMI : Ubuntu 22.04 LTS Version	
		
		
		1 VM --> 750 Hrs/Month
		
		10 VMs --> 75 Hrs/Month 
		
		
		
Tasks :::
	
		1. Linux Cli Command 
		2. Handling the Files on Linux Machines 
		3. Package Management 
			--> Install / Uninstall / Upgrade the Linux Packages 
		4. User Management 
		5. Access Management
		6. Networking - Access the Remote Servers 
		7. Process Automation
			- Shell Scripting
	
	
	Repository - Github 
	
	GITHUB is a Remote Repository for managing the Files and Folder.
		- https://github.com/

		

	Linux Cli Commands ::
	
		- clear 			# Clear the Screen
		
		Linux User Profile 
			ubuntu 			# Login purpose 
			
			root			# Linux Admin Purpose 
			
		- pwd 				# Present Working Directory 	



#########################
Day - 2 | 29th Sep. 2024
#########################


	Linux Cli Commands ::
		
			Basic Architecture :
			
	Types/Distributions of Linux ::
		
			- RHEL / Centos 
			
			- Debian/Ubuntu 				# Will be using this as Default Linux
			
			- Fedora 
			
			- Amazon Linux 
			
		
	Package Manager :
		
	Package Management ::
		
		--> Install / Uninstall / Upgrade the Linux Packages 
		
		Linux Distribution 					Package Manager 
		
		- RHEL / Centos 		===>			yum 
		
		- Debian/Ubuntu 		===> 			apt 	
		
		- Fedora 				===> 			dnf(latest version) / yum(previous version) 
		
		- Amazon Linux 			===> 			dnf(latest version) / yum(previous version)
		
		
		Package Managers can be executed only as a root user. 
		
		On Linux Ubuntu Machine :
		
			apt install git
			
			apt remove git 
			
			apt upgrade git 
		
		Handling the Files on Linux Machines 
		Package Management 
			--> Install / Uninstall / Upgrade the Linux Packages 

		sudo -i 				# Elevate the access to root user.
		
		exit 					# Logout from user account
		
		apt update -y			# Update the Default packages 
		
		
		To install any package ::::
		
			1. Install the pre-requisites  (if exist)
			
			2. Install the actual package 
			
			3. Post Installation Activities 
		
		
		git 
		
		Package ::
		
			- Simple tool 		# jdk/git/maven
					apt install jdk11
			
			- Service 			# jenkins/tomcat/nginx 
					apt install nginx -y
					
					nginx -version

					
			systemctl status nginx 
			systemctl start nginx 
			systemctl stop nginx 
			systemctl restart nginx 
			systemctl enable nginx 				# To enable nginx as a start-up service
			
			
			which nginx 						# Get the installation path.
			
		Periodic Upgrade of the package
		
		
		
	File/Directory Management :::
	
	
		- Home Directory		
		
		- Root Directory	


		cd 				# Change Directory
		
		mkdir 			# Create / Make Directory
		
		ls 				# To list the files and folders 
		
		ll				# To get the long list 
		
		ls -a 			# To list all the files and folders including the hidden files & folders.
		
		cd ..			# change to previous directory
		
		echo "Hello"			# Print any msg to terminal
		
		To Create any file on Linux :
		
			- touch <file_name>		# Used to create a empty file
		
			- echo "Hello" > testfile1.txt		# Create a file with new record
			- echo "rec3" >> file1.txt			# create a file / Add New record to the file 
			
			- vi <file_name>		# Create/Edit file using vi editor 
			
				press ==> 'i'			# goto insert mode 
				
				#Enter the file contents...
				.....
				
				press ==> 'esc key'		# come out of insert mode 
				
				type  ==> :wq			# write and quit from the file 	
				
				type  ==> :q!			# Exit without saving the file 
				
				
		cp file1.txt sub-dir1/			# Copy file from one directory to another 
		
		mv file1.txt sub-dir1/			# Move file from one directory to another
				
		mv testfile1.txt dummyfile1.txt		# Rename the file
		mv *.txt sub-dir1/
		
		
		rm <file_name>						# remove the file 

		rm -r <dir_name>					# remove the directory 
		rm -rf <dir_name>					# Force removal of directory
		

		cat <file_name>		# Read the file content
		
		ll
		
		
		File Access Level :
		
		
		drwxrwxr-x 2 ubuntu ubuntu 4096 Sep 29 15:30 sdir2/				# Directory 
		
		
		-rw-rw-r-- 1 ubuntu ubuntu    5 Sep 29 15:30 test				# File 
		
		
	
		d---------														
						# First Char: d or -	Denote the directory or file 	

		----------


		----------
		
		-									# Denote dir or file (Possible value:  d or - )
												'd'  Denotes Directory
												'-'  Denotes File 
												
												
		 ---								# Denote the Owner Level Access 
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access 
		
			---								# Denote the Group Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access

			   ---							# Denote the Public User Level Access
												Possible Values: r / w /x 
												r - Read only Access 
												w - Write Access 
												x - Execute Access
												
		drwx			# Used to get the access of the Owner  
		
		
		drwxrwx 		# Used to get the access of the Users part of the User Group 
		
		
		drwxrwxrwx		# Used to get the access level of the external/public User 
		
		
		Access Mode :
		
			- Read 
			- Write 
			- Execute 
		
		Three levels of users 
		
			- Owner 		
			
			- Group User 
			
			- Public User 
			
		The Access Mode can be controlled using :
		
			chmod 			https://chmod-calculator.com/
			
					chmod 744 sdir1/			
			
			chown 

    1  clear
    2  sudo -i
    3  pwd
    4  clear
    5  apt install git
    6  sudo -i
    7  clear
    8  sudo -i
    9  pwd
   10  clear
   11  mkdir dir1
   12  ls
   13  pwd
   14  ls
   15  cd dir1/
   16  pwd
   17  ls
   18  mkdir sub-dir1
   19  ls
   20  cd ..
   21  pws
   22  pwd
   23  clear
   24  echo "Hello"
   25  clear
   26  ls
   27  cd dir1/
   28  ls
   29  touch testfile1.txt
   30  ls
   31  echo "rec1" >> file1.txt
   32  ls
   33  cat file1.txt
   34  cat testfile1.txt
   35  echo "rec2" >> file1.txt
   36  cat file1.txt
   37  echo "rec3" >> file1.txt
   38  cat file1.txt
   39  echo "dummy-record" > file1.txt
   40  cat file1.txt
   41  clear
   42  ls
   43  vi samplefile1.txt
   44  cat samplefile1.txt
   45  vi samplefile2.txt
   46  cat samplefile2.txt
   47  ls
   48  cd sub-dir1/
   49  ls
   50  clear
   51  cd ..
   52  ls
   53  cp file1.txt sub-dir1/
   54  ls
   55  cd sub-dir1/
   56  ls
   57  cd ..
   58  ls
   59  mv testfile1.txt sub-dir1/
   60  ls
   61  cd sub-dir1/
   62  ls
   63  mv testfile1.txt dummyfile1.txt
   64  ls
   65  rm file1.txt
   66  ls
   67  rm *.txt
   68  ls
   69  cd ..
   70  ls
   71  clear
   72  ls
   73  rm sub-dir1/
   74  rm -r sub-dir1/
   75  ls
   76  clear
   77  ls
   78  mkdir sdir1
   79  mkdir sdir2
   80  mkdir sample
   81  mkdir plane
   82  echo "rec1" > test
   83  echo "rec1" > sam
   84  echo "rec1" > new1
   85  clear
   86  ls
   87  ll
   88  chmod 700 test
   89  ll
   90  chmod 444 test
   91  ll
   92  vi test
   93  chmod 744 test
   94  ll
   95  chmod 744 sdir1/
   96  ll
   97  clear
   98  ls
   99  ls -a
  100  cd ..
  101  clear
  102  history

		
Next :::
			
	User Management	:::
	
		Create Linux User

		Create the User Credentials 
			- Password 
		
		
		RBAC - Role Based Access Control 
		
		user1 --> dev_Team 
		user2 --> dev_Team
		
		devusergrp 
		
		As a best practice we manage the users as a group.
		
		
		Authentication Methods ::
		
			- Password based Authentication
			
			- Key-based Authentication
			
			- Token based Authentication
			
			- Passwordless Authentication
			
	Handling remoter servers 	
	
	Shell Scripting 

		
#########################
Day - 3 | 5th Oct. 2024
#########################

	User Management and Access Management ::::
	
		- ubuntu user 
		- root user 
		
		- devopsadmin --> perform all the devops related task
		
		
		While handling remote servers :
		
			SSH Connection :
			
				SSH Authentication Methods :
				
					- Password based Authentication
					
					- Token Based Authentication
					
					- Key Based Authentication
						-> Public Key / Authorized Key
						-> Private Key 
						
					
					- Passwordless Authentication
		
		Create Linux User 
		
		Create User Directory
		
		User Credentials 
			- Password
			
			- SSH Keys 
		
		User Group - Developers - user1,2,3,4,5
		
		Create Linux User with SSH Keys :::
		
			useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

			su - devopsadmin

			ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				

			cd .ssh
			
			ls ~/.ssh 

			#You should see following two files:

			#id_ecdsa - private key
			#id_ecdsa.pub - public
			
			
			cat id_ecdsa.pub > authorized_keys			# authorized_keys this file name should be same.
			
			authorized_keys :::
				It is the copy of Public Key.
				
				Always the private key will be compared with the authorized_keys
				
			chmod 600 /home/devopsadmin/.ssh/*					# Used to Change the Access Mode of Files or Directories
			
			chown -R devopsadmin:devopsadmin /opt/tesdir1/		# Used to Change the Ownership of Files or Directories
			
			
		Get the List of Linux Users ::::
			cat /etc/passwd
		
		Get the list of Linux User Groups :::: 
			cat /etc/group
	
	
		Create Password to any Linux User:
		
			As a root user ::
			
				passwd <user_name>
				
		root@ip-172-31-46-175:~# passwd devopsadmin
		New password:
		Retype new password:
		passwd: password updated successfully
		
				passwd -d <user_name>		# Delete Linux User Password
		
	Networking - Access the Remote Servers ::::
	
		1. Create 2 EC2 Instances 
		
		VM1(Create Key_Pair) -- share it to VM2
	
		AWS Cloud :
		
			VM1	(Server)
			
			VM2 (Client)
					
		1. Establish Connection to Remote Server  
		2. Login to the Remote Server 
		3. Copy the Files from one server to another server
			using SCP			-- Deployment 
		4. Manage the Remote Server - Install any package/Uninstall/Upgrade 
		
		Pre-requisites for Remote Server :::
		
			- Launch 2 VMs (VM1-Source & VM2-Target)
			
			- Ensure that Port 22 is enabled for SSH
			
			- Create User in both the VMs 
			
			- Create SSH-Key in one server(VM1)
			
			- Use the public_Key as a authorized_keys in the Client Machine(VM2)
			
			- Establish SSH Connection & Login to VM2(Client_Machine)
			
			- Copy Files from VM1 to VM2(Client_Machine)




### Client Machine :::


useradd testuser1 -s /bin/bash -m -d /home/testuser1

passwd testuser1

#Enter New Password:
#Confirm Password:

#Goto:

vi /etc/ssh/sshd_config

#Enable Password Authentication to Yes and save the file
#Execute Below command to update the changes.

service ssh reload

#As a root user edit below file:

$ visudo

#add the below mentioned line in the file and save it.
 
testuser1 ALL=(ALL) NOPASSWD: ALL

su - testuser1

ls -a 


### Server Machine :::


useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

#useradd devopsadmin

su - devopsadmin	

#ssh-keygen -t rsa -b 1024 -m PEM

#ssh-keygen -R rsa -b 1024 -m PEM
ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				

ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#Goto Client Machine, within testuser1 home directory, create .ssh directory

vi authorized_keys

#paste the id_ecdsa.pub of devopsadmin user from Server machine to authorized_keys file in Client Machine 

chmod 600 /home/testuser1/.ssh/*

From the Server Machine, as a devopsadmin user, Use the Private IP Address of Client Machine to Establish SSH Connection to Client Machine as a testuser1

ssh testuser1@172.31.2.173			# Private IP Address of Client Machine 



	- Copy Files from VM1 to VM2(Client_Machine)	

		Server Machine ::::		
			/home/devopsadmin/source_file1 
			
		Client Machine ::::
			/home/adminuser1/source_file1
	
		#cp  /home/devopsadmin/source_file1 home/devopsadmin
		
		scp /home/devopsadmin/source_file1 testuser1@172.31.2.173:/home/testuser1


Next :::

	7. Process Automation
			- Shell Scripting


		
#########################
Day - 4 | 6th Oct. 2024
#########################



	Get the List of Linux Users ::::
		cat /etc/passwd
	
	Get the list of Linux User Groups :::: 
		cat /etc/group


	Add users to the User Group
		
			usermod -aG <group_name> <user_name>
		
			usermod -aG docker devopsadmin


	Setting up the Environmental Variables ::::
		
		jdk17 ->
		
				used to setup - Web application servers - tomcat / httpd / nginx 
		
		
		JAVA_HOME = <jdk installation path>
		
		path=path;JAVA_HOME 


		Install Jdk :::
		
		sudo apt install openjdk-17-jre -y
		
		java --version 
		
		cd /usr/lib/jvm/					# Default Dir for Jdk.
			
			/usr/lib/jvm/java-17-openjdk-amd64/bin
			
		vi /etc/profile

		export JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64/bin"
		PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

		source /etc/profile					# refresh/reload the configurations
		
		

	Process Automation using Shell Scripts ::::
	
	
	SHELL Scripting :::
		
		Fundamentals of Shell Scripting!
		
		Scripting Languages ?
			- Are used to perform some process automation/validations
			- Light-weight 
			- Eg.: java scripts / shell scripts / yaml script / groovy / python 
				(vs)
		Progamming Language ?
			- Are used to create some business applications 
			- Huge Collection of Programming components
			- Eg.: Java/.Net Framework/Python/Ruby/Cobol/C
			
		
		Shell Scripting Language :
		
			- Shell Scripting is a collection shell commands 
			- Shell Script file should be saved as *.sh (Extention should be .sh)
			
			
			
		git				apt install git 
		jdk				apt install jdk 
		build_tool 		apt install maven 
		
		
		vi setup_build_tools.sh 
		
		sudo apt install git -y
		sudo apt install jdk -y
		sudo apt install maven -y
		
		save 
		
		$ ./setup_build_tools.sh			# Used to run the shell script 
		
		setup maven_tools on 100 build servers 
			-> ./setup_build_tools.sh	
			
			
			

		Any Scripting/Programming Languages :::	are used to effectively handle the data with some business logics
		
			- Logic !
			
			- Data :
			
			How to handle the data ?

				Variables
				
				int a = 5;
				
				a=5			 #expecting numerical value 
				
				Stud_Name = ''	# String of characters		'1231234'
				
				a=5
				
				a[5] = {1,2,3,4,5}				# Array 
					based on the index - 0
				a[0] = 1
				
				a[4] = 5

				Files Handling 
					- Sequential process 
				
				Database Management 
				
				
				Programming constructs :
				
					Conditionals Statements 
						if statements 
						case statements 
						
					Looping Statements :
						- Perform some iterations 
						
						for loop
						while loop 

							a[5] = {1,2,3,4,5}				# Array
							
							
							

			Data !!!
			
			Variable_Name to store data 
			Type of Data - Data Type !
			
			var1 = 10001 
			var2 = "asdfasdf"
			var3 = 'a'
			
			Stud_Number = '101'	

			
			Validation / Conditional Statements 
			
				IF Conditions
				SwitchCase Statements
				
			Stud_Number[5];		# Array Variable 		
				==> {1,2,3,4,5}
				
			Looping Contructs 
			
				- for loop
				- while loop
				- do-while 
			
			Functions 
				- String function
				
			Keyword 
			
			File Handling :
			
				- Create/Read/Write/Update/Delete the Files
				
			DataBase Handling using Programming Language 
			
			Remote Server Handling 

































		
SHELL Scripting :::

	Process Automation using shell scripting!
	
	Fundamentals of Shell Scripting!
	
	Scripting Languages ?
		- Are used to perform some process automation/validations
		- Light-weight 
		- Eg.: java scripts / shell scripts / yaml script / groovy / python 
			(vs)
	Progamming Language ?
		- Are used to create some business applications 
		- Huge Collection of Programming components
		- Eg.: Java/.Net Framework/Python/Ruby/Cobol/C
		
	
	Shell Scripting Language :
	
		- Shell Scripting is a collection shell commands 
		- Shell Script file should be saved as *.sh (Extention should be .sh)
		
	Install git ?
	
		Install all these packages in 200 VMs :::
	
		apt install openjdk11 -y
		apt install git -y 
		apt install maven -y 
		apt install docker.io -y
		apt install ansible -y 
		
		Shell Script :
		
installbuildtools.sh 
#!/bin/bash
sudo apt install openjdk11 -y
sudo apt install git -y 
sudo apt install maven -y 
sudo apt install docker.io -y
#sudo apt install ansible -y 

save the script as installbuildtools.sh 

/home/devopsadmin/scripts/$ ls 
installbuildtools.sh	

/home/devopsadmin/scripts/$ ./installbuildtools.sh		# Run the Shell Script!

Any Scripting/Programming Languages :::


	Data !!!
	
	Variable_Name to store data 
	Type of Data - Data Type !
	
	var1 = 10001 
	var2 = "asdfasdf"
	var3 = 'a'
	
	Stud_Number = '101'	

	
	Validation / Conditional Statements 
	
		IF Conditions
		SwitchCase Statements
		
	Stud_Number[5];		# Array Variable 		
		==> {1,2,3,4,5}
		
	Looping Contructs 
	
		- for loop
		- while loop
		- do-while 
	
	Functions 
		- String function
		
	Keyword 
	
	File Handling :
	
		- Create/Read/Write/Update/Delete the Files
		
	DataBase Handling using Programming Language 
	
	Remote Server Handling 
	
Next :::

	Working with Shell Scripting!
		
		
			

#Install JDK 

java --version

cd /usr/lib/jvm/
	
	/usr/lib/jvm/java-21-openjdk-amd64/bin

#edit /etc/profile & add JAVA_HOME

vi /etc/profile


export JAVA_HOME="/usr/lib/jvm/java-21-openjdk-amd64/bin"
PATH=$PATH:$HOME/bin:$JAVA_HOME/bin

source /etc/profile
	
	
	Fundamentals of Shell Scripting!	
	
	Software Application ?
	
		- Collection of Programs.
			
	Program / Script?
		- To Solve a problem.
		- To Provide a Solution.
	
		- How to write a program?
		- What are the pre-requisites to write a program?
		
		Problem Statement:
		
		The Requirement
		
		SDLC 
		
		Requirement Analysis Phase 
		Design/Document 
		Code/Programming 
		Test 
		Implementation
		
		Program 
		
		Algorithm :
		
			- The Step-by-step process to provide the solution/Task 
			- It is written is high-level language 
			
			- Based on the algorithm, we create Source Code using Programming/Scripting Languages
			
		Problem Statement :
		
		Calculate sum of two numbers and print the result :
		
S1: Take two integers as input
S2: Add the two integers 
S3: Print the result


int a; 
int b;
int c;
pub=a,b,c;
a=b+c;
print a;

1)int a=8 
2)int b=7 
3)int c=a+b 
then 
print c.


 5 + 5 	= ?
 
 30 + 30 = ?
		
 20000000000000 + 3000000000000000 = ?
 
 222222222.55534 + 2342342.123123 = ?
	
	
	Logical Thinking! 
	

Scripting :::

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print Hello World on terminal using echo command

Source Code:

#!/bin/bash
#
echo "Hello World"




































~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to print the calender month by default.

Source Code:

#!/bin/bash
#	     
echo "The Month is"
cal # cal command displays current month by default


























~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to read user input and perform operations with them.

Source Code:

#!/bin/bash
echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

SUM=$(($NUM1 + $NUM2)) # Arithmetic expansion using double parentheses
echo "The sum is $SUM"




















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if condition

#Operators :: 6 Operators

Source Code:


#!/bin/bash

echo -n "Enter number 1 : " # -n option supresses newline
read NUM1 # Read the user input from Standard Input and store in Variable NUM1

echo -n "Enter number 2 : "
read NUM2

if [ $NUM1 -gt $NUM2 ] # -gt is to test integer numbers
then
    echo "NUM1 > NUM2"
fi





















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of if else condition

Source Code:

#!/bin/bash

NUM1=2 # Variabe assignment
NUM2=5

if [ $NUM1 -lt $NUM2 ]  # -lt is to test intiger numbers
then
    echo "NUM1 < NUM2"
else
    echo "NUM1 > NUM2"
fi






















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show usage of else if condition

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

if [ $NUM -gt 0 ]
then
    echo "$NUM is +ve"
elif [ $NUM -lt 0 ]
then
    echo "$NUM is -ve"
else
    echo "$NUM is 0"
fi

echo "done"












~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR											# A , a ,e,i,o,u 

case $CHAR in
	a) echo "You entered $CHAR which is a vowel";;  # ;; Terminates each option
	e) echo "You entered $CHAR which is a vowel";;
	i) echo "You entered $CHAR which is a vowel";;
	o) echo "You entered $CHAR which is a vowel";;
	u) echo "You entered $CHAR which is a vowel";;
	*) echo "You entered $CHAR which is not a vowel";; # Defaults to everything else
esac

echo "What if you enter upper case letters!!?, Check the next example"














~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Enter a character: "
read CHAR

case $CHAR in
	a | A) # Test for both Lower or Upper case letter
		# You may write commands in this fashion too!!, means multiline commands
		echo "You entered $CHAR which is a vowel"
		;; # Terminates each option
	e | E) 
		echo "You entered $CHAR which is a vowel"
		;;
	i | I) 
		echo "You entered $CHAR which is a vowel"
		;;
	o | O) 
		echo "You entered $CHAR which is a vowel"
		;;
	u | U) 
		echo "You entered $CHAR which is a vowel"
		;;
	*)  # Defaults to everything else
		echo "You entered $CHAR which is not a vowel"
		;;
esac












~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate case statement

Source Code:

#!/bin/bash

echo -n "Oceans are larger than lakes (True or False) : "
read USER_INPUT

case $USER_INPUT in
	"TRUE"| "True" | "true")
		echo "Yes you are right"
		;; # Terminates each option
	"FALSE" | "Fasle" | "false")
		echo "No your are wrong"
		;;
	*)  # Defaults to everything else
		echo "Please enter either True or False"
		;;
esac

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of string compare operator == and !=

Source Code:

#!/bin/bash

STR1="Hello"
STR2="Hello"

if [ ${STR1} == ${STR2} ]
then
    echo "Strings match"
else
    echo "Strings don't match"
fi
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of string compare operator -z and -n

Source Code:

#!/bin/bash

STR1="Hello"
STR2="Hello"

if [ -z "${STR1}" ]
then
    echo "String1 is empty"
else
    echo "String1 is NOT empty"
fi

echo ":$STR:"
if [ -n "${STR2}" ]
then
    echo "String2 is NOT empty"
else
    echo "String2 is empty"
fi

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage of logical operators

Source Code:

#!/bin/bash

echo -n "Enter a NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using AND -a operator)
if [ $NUM -ge 10 -a $NUM -le 20 ]
then
    echo "$NUM is between 10 and 20"
else
    echo "$NUM is NOT between 10 and 20"
fi

echo -n "Enter another NUM: "
read NUM

# Check whether a number is between 10 and 20 (Using OR -o operator)
if [ $NUM -lt 10 -o $NUM -gt 20 ]
then
    echo "$NUM is NOT between 10 and 20"
else
    echo "$NUM is between 10 and 20"
fi
















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to show usage while loop

Source Code:

#!/bin/bash
#

COUNT=0

while [ $COUNT -lt 5 ]
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done

echo "Done"
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Sum of N natural numbers using while loop

Source Code:

#!/bin/bash
#

echo -n "Enter a number: "
read NUM

let SUM=0; 
let I=1
while [ $I -le $NUM ]
do
	SUM=`expr $SUM + $I`
	I=$((${I} + 1))
done

echo "The sum of the first $NUM numbers is: $SUM"


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ Bash syntax ]

Source Code:

#!/bin/bash
#

COUNT=0

for i in 0 1 2 3 4
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done




















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A simple script to demonstarte for loop [ C syntax ]

Source Code:

#!/bin/bash

COUNT=0

for ((i = 0; i < 5; i++))
do
    echo "Loop count is ${COUNT}"
    COUNT=$((COUNT + 1))
done
















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of command line arguments, Here we access positional arguments using $1, $2 …

Source Code:

#!/bin/bash

echo "Total no. of argument: $#"

echo "Program name: $0"
echo "1st argument: $1"
echo "2nd argument: $2"
echo "3rd argument: $3"










~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 A script to show the usage of command line arguments, Here we access arguments by iterating over $@

Source Code:

#!/bin/bash

echo "Total no. of argument: $#"
echo "Argument list: $@" # Commonly used
echo "Argument list: $*"

# Iterate over arguments ($@)
for ARG in $@
do
    echo $ARG
done
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function

Source Code:


print_hello

#!/bin/bash

# Function definition
function print_hello()
{
    	echo "====="
    	echo "Hello"
    	echo "====="
}

# Call the function - print_hello
print_hello

print_hello
print_hello
print_hello
print_hello


#print_hello















~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function and how to pass arguments

Source Code:

#!/bin/bash

# Function definition
function find_sum()
{
    SUM=`expr $1 + $2`
    echo $SUM
}

# Pass arguments 10 and 20 to find_sum function
find_sum 10 20 # 30

# Save the output of function in a variable
RESULT=`find_sum 100 200`
echo $RESULT	# 300


num1=5
num2=5


sample1.sh

#!/bin/bash
num1=$1
num2=$2

num3=$num1 + $num2

num3=$1 + $2 + $3 

echo $num3 

sh sample1.sh 34 45 43








~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show the usage of function and how to pass arguments Inside function:
$# – Gives no. of arguments
$@ – Contains the arguments to function
Accessing function arguments is similar to accessing command line arguments

Source Code:

#!/bin/bash

# Function definition
function find_sum()
{
    echo "Arg count: $#"
    echo "Arg list: $@"
    SUM=0
    # Iterate over function arguments
    for ARG in $@
    do
	SUM=`expr $ARG + $SUM`
    done

    echo $SUM
}

# Call find_sum with many arguments
find_sum 1 2 3 4 5

find_sum 10 20

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to show how to declare an array and access its elements

Source Code:

#!/bin/bash

# Declare an array
FRUITS=(apple mango banana orange)

# Print value of each element
echo "element 0: ${FRUITS[0]}"
echo "element 1: ${FRUITS[1]}"
echo "element 2: ${FRUITS[2]}"
echo "element 3: ${FRUITS[3]}"

# Print size / length of array
echo "Length: ${#FRUITS[@]}"
echo "Whole array: ${FRUITS[@]}"
echo "Whole array: ${FRUITS[*]}"

echo "Looping over array elements"
# Iterate over array elements
for ITEM in ${FRUITS[@]}
do
    echo $ITEM
done


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to store all cmd line arguments to a array and prints

Source Code:

#!/bin/bash

ARG=($*)

echo ${ARG[0]}
echo ${ARG[1]}
echo ${ARG[2]}
echo ${ARG[3]}
echo ${ARG[4]}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demonstrate different types of array access

Source Code:

#!/bin/bash
#

array=(zero one two three four five)

# Element 0   1   2    3   4   5
echo ${array[0]}       #  zero
echo ${array:0}        #  zero, Parameter expansion of first element,+ starting at position # 0 (1st character).
echo ${array:1}        #  ero, Parameter expansion of first element, + starting at position # 1 (2nd character).
echo "--------------"
echo ${#array[0]}      #  4, Length of first element of array.
echo ${#array}         #  4, Length of first element of array. (Alternate notation)
echo ${#array[1]}      #  3, Length of second element of array. Arrays in Bash have zero-based indexing.
echo ${#array[*]}      #  6, Number of elements in array.
echo ${#array[@]}      #  6, Number of elements in array.
echo "--------------"

# Quoting permits embedding whitespace within individual array elements.
array2=([0]="first element" [1]="second element" [3]="fourth element")

echo "The ${array2[0]}"   # first element
echo "The ${array2[1]}"   # second element
echo "The ${array2[2]}"   # Skipped in initialization, and therefore null.
echo "The ${array2[3]}"   # fourth element
echo "The lenght of ${array2[0]} ${#array2[0]}" 	   # 13 (length of first element)
echo "The number of elements in the array ${#array2[*]}"  # 3  (number of elements in array)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A script to demostrate usage of sed command

Source Code:

#!/bin/bash

# Basic text substitution using sed
echo "Bash Scripting Bash Language" | sed 's/Bash/Perl/'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~






